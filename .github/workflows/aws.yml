name: app CI on AWS ECR

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
#  release:
#  types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Test the app
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./src/requirements.txt
          
      - name: Run unit tests using pytest
        run: |
          coverage run -m pytest
          coverage-badge -f -o ./coverage.svg

#  lint:
#    name: Run Hadolint for Dockerfile
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Hadolint linting
#        uses: brpaz/hadolint-action@master
          
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ test ]
    timeout-minutes: 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
#      - name: Extract tag
#        shell: bash
#        run: echo "##[set-output name=release_tag;]$(echo ${GITHUB_REF#refs/tags/})"
#        id: extract_tag
        
      - name: Build, tag, and push image to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_REPO_NAME }}
          IMAGE_TAG: latest
          ###IMAGE_TAG: ${{ github.sha }}
          ##IMAGE_TAG: ${{ steps.extract_tag.outputs.release_tag }}
          #PROJECT_SERVICE: fastapi_crud_web
        run: |
          # Build a docker container and push it to ECR
          ECR_REGISTRY=$ECR_REGISTRY ECR_REPOSITORY=$ECR_REPOSITORY IMAGE_TAG=$IMAGE_TAG docker-compose build
          
          docker create -it --name dummy $(docker images | awk '{print $1}' | awk 'NR==2') bash
          docker cp dummy:/code/src/coverage.svg .
          docker cp dummy:/code/src/.coverage .
          docker rm -f dummy
          
          docker-compose push
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
      - name: Logout from AWS ECR
        if: always()
        run: docker logout $ECR_REGISTRY
          
          #docker-compose up --exit-code-from web --build
          #docker tag $PROJECT_SERVICE $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

